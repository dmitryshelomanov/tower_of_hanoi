{"version":3,"sources":["components/disk.js","components/tower.js","disk-sizes.js","alghorithm.js","app.js","serviceWorker.js","index.js"],"names":["DiskUI","styled","div","props","diskWidth","diskColor","isDragging","Disk","id","color","width","onMove","canDrag","towerId","useDrag","item","type","end","monitor","dropResult","getDropResult","diskId","toTower","fromTower","collect","drag","ref","TowerPlane","TowerBottomLine","TowerContainer","TowersWrapper","Tower","children","disks","onMoveDisk","useDrop","accept","drop","canDrop","length","isOver","map","disk","index","key","varriablesForLvl1","generateColor","CONSTANT_SIZE","getRange","Math","ceil","random","Color","r","g","b","toString","buildDiskSizesForLvls","maxLvl","Array","from","reduce","acc","_","1","FIRST_TOWER","SECOND_TOWER","THIRD_TOWER","alghorithmRunner","disksState","steps","slice","moveDisk","shift","unshift","push","hanoi","nDisks","HELP_TOWER","arr2","filter","x","includes","getHelpTower","Select","select","ButtonsWrapper","Wrapper","initialDisksCount","initialGameState","towers","userMoves","buildDisksState","disksCount","disksScheme","towersUpdater","updaters","forRestUpdater","undefined","rest","disksReducer","state","action","payload","find","DISKS_VARRIANTS","Boolean","window","location","hostname","match","ReactDOM","render","backend","HTML5Backend","useState","setDisksCount","useReducer","gameState","dispatch","useMemo","useCallback","onRestart","onCompleteCallback","setTimeout","alert","setSteps","isPause","setPause","intervalId","useRef","step","clearIntervalId","current","clearInterval","pause","play","setInterval","useEffect","solve","rs","useSolver","cb","isComplete","useCompleteState","isInitial","useInitialState","onChange","event","target","value","onClick","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7418e74.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport styled from \"styled-components\";\n\nexport const DiskUI = styled.div`\n  height: 21px;\n  border: 1px solid black;\n  width: ${props => props.diskWidth}px;\n  background-color: ${props => props.diskColor};\n  z-index: 2;\n  opacity: ${props => (props.isDragging ? 0 : 1)};\n`;\n\nexport function Disk({ id, color, width, onMove, canDrag, towerId }) {\n  const [{ isDragging }, drag] = useDrag({\n    item: { id, type: \"disk\" },\n    end: (item, monitor) => {\n      const dropResult = monitor.getDropResult();\n\n      if (item && dropResult) {\n        onMove({ diskId: item.id, toTower: dropResult.id, fromTower: towerId });\n      }\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    }),\n    canDrag: () => canDrag\n  });\n\n  return (\n    <DiskUI\n      ref={drag}\n      diskColor={color}\n      diskWidth={width}\n      isDragging={isDragging}\n    />\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useDrop } from \"react-dnd\";\nimport { Disk } from \"./disk\";\nimport { isTSEnumMember } from \"@babel/types\";\n\nconst TowerPlane = styled.div`\n  display: block;\n  width: 4px;\n  height: 200px;\n  background-color: black;\n  position: absolute;\n`;\n\nconst TowerBottomLine = styled.div`\n  display: block;\n  width: 200px;\n  height: 4px;\n  background-color: black;\n`;\n\nconst TowerContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  flex-direction: column;\n  position: relative;\n  height: 204px;\n`;\n\nexport const TowersWrapper = styled.div`\n  display: flex;\n  margin: 15px 0;\n\n  ${TowerContainer} {\n    margin-right: 25px;\n  }\n`;\n\nexport function Tower({ children, id, disks = [], onMoveDisk }) {\n  const [{ canDrop, isOver }, drop] = useDrop({\n    accept: \"disk\",\n    drop: () => ({ id }),\n    canDrop: item => {\n      if (disks.length > 0) {\n        return disks[0].id > item.id;\n      }\n\n      return true;\n    },\n    collect: monitor => ({\n      isOver: monitor.isOver()\n    })\n  });\n\n  return (\n    <TowerContainer ref={drop}>\n      <TowerPlane />\n      {disks.map((disk, index) => (\n        <Disk\n          key={disk.id}\n          color={disk.color}\n          width={disk.width}\n          id={disk.id}\n          onMove={onMoveDisk}\n          canDrag={index === 0}\n          towerId={id}\n        />\n      ))}\n      <TowerBottomLine />\n    </TowerContainer>\n  );\n}\n","import Color from \"color\";\n\nconst varriablesForLvl1 = { width: 50, color: generateColor() };\nconst CONSTANT_SIZE = 20;\n\nfunction generateColor() {\n  const getRange = () => Math.ceil(Math.random() * 255);\n\n  return Color({ r: getRange(), g: getRange(), b: getRange() }).toString();\n}\n\nexport function buildDiskSizesForLvls(maxLvl = 4) {\n  return Array.from({ length: maxLvl }).reduce(\n    (acc, _, index) => {\n      if (index > 0) {\n        return {\n          ...acc,\n          [index + 1]: {\n            width: acc[index].width + CONSTANT_SIZE,\n            color: generateColor()\n          }\n        };\n      }\n\n      return acc;\n    },\n    { 1: varriablesForLvl1 }\n  );\n}\n","export const FIRST_TOWER = 0;\nexport const SECOND_TOWER = 1;\nexport const THIRD_TOWER = 2;\n\nexport function alghorithmRunner(disksState) {\n  const steps = [];\n  const disks = [\n    disksState[FIRST_TOWER].slice(0), // FIRST_TOWER\n    disksState[SECOND_TOWER].slice(0), // SECOND_TOWER\n    disksState[THIRD_TOWER].slice(0) // THIRD_TOWER\n  ];\n\n  function getHelpTower(fromTower, toTower) {\n    const arr1 = [FIRST_TOWER, SECOND_TOWER, THIRD_TOWER];\n    const arr2 = [fromTower, toTower];\n    const difference = arr1.filter(x => !arr2.includes(x));\n\n    return difference[0];\n  }\n\n  function hanoi(nDisks, fromTower, toTower) {\n    if (nDisks > 1) {\n      const HELP_TOWER = getHelpTower(fromTower, toTower);\n\n      hanoi(nDisks - 1, fromTower, HELP_TOWER);\n      moveDisk(fromTower, toTower);\n      hanoi(nDisks - 1, HELP_TOWER, toTower);\n\n      return;\n    }\n\n    moveDisk(fromTower, toTower);\n  }\n\n  function moveDisk(fromTower, toTower) {\n    const disk = disks[fromTower].shift();\n\n    disks[toTower].unshift(disk);\n\n    steps.push({ fromTower, toTower, diskId: disk.id });\n  }\n\n  hanoi(disks[FIRST_TOWER].length, FIRST_TOWER, THIRD_TOWER);\n\n  return steps;\n}\n","import React, {\n  useState,\n  useMemo,\n  useReducer,\n  useEffect,\n  useCallback,\n  useRef\n} from \"react\";\nimport styled from \"styled-components\";\nimport { Tower, TowersWrapper } from \"./components\";\nimport { buildDiskSizesForLvls } from \"./disk-sizes\";\nimport { alghorithmRunner, FIRST_TOWER, THIRD_TOWER } from \"./alghorithm\";\n\nconst Select = styled.select`\n  margin-left: 15px;\n`;\n\nconst ButtonsWrapper = styled.div`\n  display: flex;\n  margin: 5px;\n\n  > button:not(:last-child) {\n    margin-right: 10px;\n  }\n`;\n\nconst Wrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n\n  > &{Tower} {\n    margin-right: 15px\n  }\n\n  > p {\n    font-weight: bold;\n    margin: 10px 0;\n\n    > span {\n      font-weight: normal\n    }\n  }\n`;\n\nconst initialDisksCount = 3;\nconst initialGameState = {\n  disks: [],\n  towers: [[], [], []],\n  userMoves: 0\n};\n\nfunction buildDisksState(disksCount, disksScheme) {\n  return Array.from({ length: disksCount }, (_, index) => ({\n    id: index,\n    ...disksScheme[index + 1]\n  }));\n}\n\nfunction towersUpdater(towers, updaters) {\n  return towers.map((disks, index) => {\n    const forRestUpdater = updaters.rest !== undefined;\n\n    if (updaters[index]) {\n      return updaters[index](disks);\n    }\n\n    return forRestUpdater ? updaters.rest(disks) : [];\n  });\n}\n\nfunction disksReducer(state, action) {\n  switch (action.type) {\n    case \"BUILD_DISKS_STATE\":\n      return {\n        ...initialGameState,\n        disks: action.payload,\n        towers: towersUpdater(state.towers, {\n          [FIRST_TOWER]: () => action.payload\n        })\n      };\n    case \"MOVE_DISK\":\n      const { diskId, fromTower, toTower } = action.payload;\n      const disk = state.towers[fromTower].find(disk => disk.id === diskId);\n\n      return {\n        ...state,\n        userMoves: state.userMoves + 1,\n        towers: towersUpdater(state.towers, {\n          [fromTower]: disks => disks.filter(disk => disk.id !== diskId),\n          [toTower]: disks => [disk, ...disks],\n          rest: disks => disks\n        })\n      };\n    case \"RESTART\":\n      return {\n        ...initialGameState,\n        disks: state.disks,\n        towers: towersUpdater(state.towers, {\n          [FIRST_TOWER]: () => state.disks\n        })\n      };\n    default:\n      return state;\n  }\n}\n\nfunction useSolver(towers, moveDisk) {\n  const [steps, setSteps] = useState([]);\n  const [isPause, setPause] = useState(true);\n  const intervalId = useRef();\n  const step = useRef(0);\n\n  const clearIntervalId = useCallback(() => {\n    if (intervalId.current) {\n      clearInterval(intervalId.current);\n\n      intervalId.current = undefined;\n    }\n  }, []);\n\n  const pause = useCallback(() => {\n    setPause(true);\n    clearIntervalId();\n  }, [clearIntervalId]);\n\n  const play = useCallback(() => {\n    setPause(false);\n    intervalId.current = setInterval(() => {\n      if (step.current < steps.length) {\n        moveDisk(steps[step.current]);\n        step.current += 1;\n\n        return;\n      }\n\n      clearIntervalId();\n    }, 1000);\n  }, [clearIntervalId, moveDisk, steps]);\n\n  useEffect(() => {\n    if (steps.length > 0) {\n      play();\n    }\n  }, [play, steps.length]);\n\n  return {\n    isPause,\n    pause,\n    play,\n    clearIntervalId,\n    solve: () => {\n      const rs = alghorithmRunner(towers);\n\n      setSteps(rs);\n    }\n  };\n}\n\nfunction useCompleteState(disksCount, towers, cb) {\n  const isComplete = disksCount === towers[THIRD_TOWER].length;\n\n  useEffect(() => {\n    if (isComplete) {\n      cb();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isComplete]);\n}\n\nfunction useInitialState(disksCount, towers, cb) {\n  const isInitial = disksCount === towers[FIRST_TOWER].length;\n\n  useEffect(() => {\n    if (isInitial) {\n      cb();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isInitial]);\n}\n\nconst DISKS_VARRIANTS = [3, 4, 5, 6, 7, 8];\n\nexport function App() {\n  const [disksCount, setDisksCount] = useState(initialDisksCount);\n  const [gameState, dispatch] = useReducer(disksReducer, initialGameState);\n  const disksScheme = useMemo(() => buildDiskSizesForLvls(disksCount), [\n    disksCount\n  ]);\n\n  const onMoveDisk = useCallback(({ diskId, fromTower, toTower }) => {\n    dispatch({ type: \"MOVE_DISK\", payload: { fromTower, toTower, diskId } });\n  }, []);\n\n  const onRestart = useCallback(() => {\n    dispatch({ type: \"RESTART\" });\n  }, []);\n\n  const onCompleteCallback = useCallback(() => {\n    setTimeout(() => {\n      alert(`Completed in ${gameState.userMoves} moves`);\n    }, 100);\n  }, [gameState.userMoves]);\n\n  const { solve, clearIntervalId } = useSolver(gameState.towers, onMoveDisk);\n\n  useCompleteState(disksCount, gameState.towers, onCompleteCallback);\n  useInitialState(disksCount, gameState.towers, clearIntervalId);\n\n  useEffect(() => {\n    dispatch({\n      type: \"BUILD_DISKS_STATE\",\n      payload: buildDisksState(disksCount, disksScheme)\n    });\n  }, [disksCount, disksScheme]);\n\n  return (\n    <Wrapper>\n      <TowersWrapper>\n        {Array.from({ length: 3 }, (_, index) => (\n          <Tower\n            key={index}\n            id={index}\n            disks={gameState.towers[index]}\n            onMoveDisk={onMoveDisk}\n          />\n        ))}\n      </TowersWrapper>\n      <p>\n        Your numbers of move: <span>{gameState.userMoves}</span>\n      </p>\n      <p>\n        Number of disks\n        <Select\n          onChange={event => {\n            setDisksCount(event.target.value);\n          }}\n          value={disksCount}\n        >\n          {DISKS_VARRIANTS.map(item => (\n            <option value={item} key={item}>\n              {item}\n            </option>\n          ))}\n        </Select>\n      </p>\n      <ButtonsWrapper>\n        <button onClick={solve}>solve it!</button>\n        <button onClick={onRestart}>restart</button>\n      </ButtonsWrapper>\n    </Wrapper>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport { App } from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <DndProvider backend={HTML5Backend}>\n    <App />\n  </DndProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}